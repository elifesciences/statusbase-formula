server {
    listen 80;
    {% if salt['elife.cfg']('cfn.outputs.DomainName') %}
    server_name {{ salt['elife.cfg']('project.project_hostname') }}
                {{ salt['elife.cfg']('project.full_hostname') }}
                {{ salt['elife.cfg']('project.int_project_hostname') }}
                {{ salt['elife.cfg']('project.int_full_hostname') }}
    {% else %}
    server_name localhost;
    {% endif %}

    root /srv/statusbase/web;

    auth_basic "Restricted";
    auth_basic_user_file /etc/nginx/.htpasswd;

    location / {
        try_files $uri /app_dev.php$is_args$args;
    }


    # DEV
    # This rule should only be placed on your development environment
    # In production, don't include this and don't deploy app_dev.php or config.php
    {% if pillar.statusbase.debug %}
    location ~ ^/(app_dev|config)\.php(/|$) {
        fastcgi_pass unix:/var/php-fpm.sock;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        fastcgi_intercept_errors on;
        include fastcgi_params;
        # When you are using symlinks to link the document root to the
        # current version of your application, you should pass the real
        # application path instead of the path to the symlink to PHP
        # FPM.
        # Otherwise, PHP's OPcache may not properly detect changes to
        # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
        # for more information).
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
    }
    {% else %}
    # PROD
    location ~ ^/app\.php(/|$) {
        fastcgi_pass unix:/var/php-fpm.sock;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        fastcgi_intercept_errors on;
        include fastcgi_params;
        # When you are using symlinks to link the document root to the
        # current version of your application, you should pass the real
        # application path instead of the path to the symlink to PHP
        # FPM.
        # Otherwise, PHP's OPcache may not properly detect changes to
        # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
        # for more information).
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
        # Prevents URIs that include the front controller. This will 404:
        # http://domain.tld/app.php/some-path
        # Remove the internal directive to allow URIs like this
        internal;
    }
    {% endif %}

    # return 404 for all other php files not matching the front controller
    # this prevents access to other php files you don't want to be accessible.
    location ~ \.php$ {
      return 404;
    }


    access_log /var/log/nginx/website.access.log combined_with_time;
    error_log /var/log/nginx/website.error.log notice;
}
